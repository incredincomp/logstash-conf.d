input {
  beats {
    port => 5044
  }
}
filter {
  if [cef.extensions.applicationProtocol] == "49271" {
     drop { }
  }
  else if [cef.device.vendor] == "SonicWall" {
    mutate {
      rename => {
        "cef.device.product" => "observer.product"
        "cef.device.vendor" => "observer.vendor"
        "cef.device.version" => "observer.version"
        "cef.extensions.appName" => "rule.name"
        "cef.extensions.applicationProtocol" => "rule.id"
        "cef.extensions.baseEventCount" => "event.sequence"
        "cef.extensions.bytesOut" => "destination.bytes"
        "cef.extensions.bytesIn" => "source.bytes"
        "cef.extensions.destinationAddress" => "destination.address"
        "cef.extensions.destinationPort" => "destination.port"
        "cef.extensions.deviceEventCategory" => "event.category"
        "cef.extensions.fw_action" => "event.action"
        "cef.extensions.gcat" => "rule.id"
        "cef.extensions.sourceAddress" => "source.address"
        "cef.extensions.sourcePort" => "source.port"
        "cef.extensions.susr" => "user.name"
        "cef.extensions.transportProtocol" => "network.protocol"
        "cef.name" => "rule.category"
        "cef.extensions.message" => "rule.description"
        "cef.extensions.deviceCustomString1Label" => "source.nat.ip"
        "cef.extensions.deviceCustomString2Label" => "destination.nat.ip"
        "cef.extensions.deviceCustomString6" => "rule.category"
        "cef.extensions.dnpt" => "destination.nat.port"
        "cef.extensions.requestUrl" => "url.full"
        "cef.extensions.snpt" => "source.nat.port"
      }
      remove_field => [
        "cef.severity",
        "cef.version",
        "cef.extensions.deviceCustomString1Label",
        "cef.extensions.deviceOutboundInterface",
        "cef.extensions.deviceInboundInterface",
        "cef.device.event_class_id"
      ]
      add_field => {
        "observer.type" => "firewall"
      }
    }
  }
  cidr {
    add_tag => [ "Internal" ]
    address => [ "%{source.ip}" ]
    network => [ "10.0.0.0/8" ]
  }
  if "Internal" not in [tags] {
    geoip {
      source => "[cef][extensions][sourceAddress]"
      add_tag => [ "_geoip_lookup_pass" ]
    }
  }
  if "_geoip_lookup_pass" in [tags] {
    mutate {
      copy => {
        "[geoip][location]" => "[source][geo][location]"
      }
    }
  }
}
output {
  elasticsearch {
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "logstash_internal"
    password => "${LS_INTERNAL}"
  }
}